// Generated by CoffeeScript 1.4.0
(function() {
  var Go, Gos, animStep, animate, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2PolygonShape, b2Vec2, b2World, body, bodyDef, camera, context, controls, filter, fixDef, frequencyChange, gui, init, initialised, loadAudioFile, loadedAudio, num_meshes, onWindowResize, pause, physicsScaleX, physicsScaleY, playAudioFile, posX, posY, previousTime, renderer, scene, sprite, spriteMat, ssource, startMusic, world;

  initialised = false;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  world = new b2World(new b2Vec2(0, 10), true);

  fixDef = new b2FixtureDef;

  fixDef.density = 1.0;

  fixDef.friction = 0.5;

  fixDef.restitution = 1.0;

  bodyDef = new b2BodyDef;

  bodyDef.type = b2Body.b2_staticBody;

  bodyDef.position.x = 0;

  bodyDef.position.y = 20;

  fixDef.shape = new b2PolygonShape;

  fixDef.shape.SetAsBox(20, 0.5);

  world.CreateBody(bodyDef).CreateFixture(fixDef);

  bodyDef.type = b2Body.b2_dynamicBody;

  fixDef.shape = new b2PolygonShape;

  fixDef.shape.SetAsBox(1, 10);

  bodyDef.position.x = 0;

  bodyDef.position.y = 0;

  body = world.CreateBody(bodyDef);

  body.CreateFixture(fixDef);

  posX = localStorage.getItem("positionX");

  posY = localStorage.getItem("positionY");

  if ((posX != null) && (posY != null)) {
    console.log(posX);
    console.log(posY);
    body.SetPosition({
      x: parseFloat(posX),
      y: parseFloat(posY)
    });
  }

  physicsScaleX = 100;

  physicsScaleY = -100;

  filter = 0;

  ssource = 0;

  loadedAudio = false;

  context = new webkitAudioContext();

  playAudioFile = function(buffer) {
    var source;
    source = context.createBufferSource();
    source.buffer = buffer;
    filter = context.createBiquadFilter();
    filter.type = 0;
    filter.frequency.value = 440;
    source.connect(filter);
    return filter.connect(context.destination);
  };

  loadAudioFile = function(url) {
    var request;
    request = new XMLHttpRequest();
    request.open('get', 'test.wav', true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
      return context.decodeAudioData(request.response, function(incomingBuffer) {
        return playAudioFile(incomingBuffer);
      });
    };
    return request.send();
  };

  frequencyChange = function(value) {
    var maxValue, minValue, multiplier, numberOfOctaves;
    minValue = 40;
    maxValue = context.sampleRate / 2;
    numberOfOctaves = Math.log(maxValue / minValue) / Math.LN2;
    multiplier = Math.pow(2, numberOfOctaves * (value - 1.0));
    return filter.frequency.value = maxValue * multiplier;
  };

  window.frequencyChange = frequencyChange;

  startMusic = function() {
    if (loadedAudio) {
      return source.start(0);
    }
  };

  window.startMusic = startMusic;

  gui = new dat.GUI();

  num_meshes = 10;

  Gos = [[], [], []];

  renderer = 0;

  scene = 0;

  camera = 0;

  controls = 0;

  sprite = 0;

  spriteMat = 0;

  Go = (function() {

    function Go(mesh, tween) {
      this.mesh = mesh;
      this.tween = tween;
    }

    return Go;

  })();

  init = function() {
    var controlsStore, endFrame, geometry, groundGeom, i, material, mesh, numFrames, plane, planeH, planeW, spriteMap, spriteTween, startFrame, tween, tween2, _i;
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.z = 4000;
    controls = new THREE.OrbitControls(camera);
    controlsStore = localStorage.getItem("controls");
    if (controlsStore != null) {
      camera.position.copy(JSON.parse(controlsStore));
      console.log(controlsStore);
    }
    scene = new THREE.Scene();
    planeW = 100;
    planeH = 100;
    plane = new THREE.Mesh(new THREE.PlaneGeometry(planeW * 100, planeH * 100, planeW, planeH), new THREE.MeshBasicMaterial({
      color: 0xaaaaaa,
      wireframe: true
    }));
    plane.rotation.x = Math.PI / 2;
    scene.add(plane);
    scene.add(new THREE.AxisHelper(100));
    spriteMap = THREE.ImageUtils.loadTexture("run.jpg");
    spriteMat = new THREE.SpriteMaterial({
      map: spriteMap,
      color: 0xffffff,
      useScreenCoordinates: false,
      transparent: true
    });
    sprite = new THREE.Sprite(spriteMat);
    sprite.scale.set(100, 100, 1);
    spriteMat.opacity = 0.6;
    scene.add(sprite);
    numFrames = 10;
    startFrame = 1;
    endFrame = 7;
    console.log(spriteMat.uvScale);
    spriteMat.uvScale.set(1 / numFrames, 1);
    spriteTween = new TWEEN.Tween({
      frame: startFrame
    }).to({
      frame: endFrame
    }, 1000).repeat(Infinity).onUpdate(function() {
      var frameX;
      console.log(spriteMat.uvOffset);
      frameX = (1 / 10) * Math.floor(this.frame);
      return spriteMat.uvOffset.set(frameX, 0);
    });
    spriteTween.start();
    window.physicsScaleY = physicsScaleY;
    gui.add(this, 'physicsScaleY', -10, 10);
    geometry = new THREE.CubeGeometry(200, 200, 200);
    material = new THREE.MeshBasicMaterial({
      color: 0x777722,
      wireframe: false,
      transparent: true,
      opacity: 0.1
    });
    material.uvScale = [1, 1];
    for (i = _i = 0; 0 <= num_meshes ? _i < num_meshes : _i > num_meshes; i = 0 <= num_meshes ? ++_i : --_i) {
      Gos[i] = new Go(mesh, 0);
      mesh = new THREE.Mesh(geometry, material);
      mesh.position.x = (i - num_meshes / 2.0) * 300;
      mesh.position.y = 0;
      mesh.position.z = 0;
      scene.add(mesh);
    }
    groundGeom = new THREE.CubeGeometry(20 * physicsScaleX, 0.5 * physicsScaleY, 0.5 * 20 * physicsScaleX);
    mesh = new THREE.Mesh(groundGeom, material);
    mesh.position.x = 0;
    mesh.position.y = 10 * physicsScaleY;
    mesh.position.z = 0;
    scene.add(mesh);
    tween = new TWEEN.Tween({
      scale: 1
    }).to({
      scale: 0.01
    }, 5000).delay(0).repeat(Infinity).onUpdate(function() {
      return mesh.scale.set(this.scale, this.scale, this.scale);
    });
    tween2 = new TWEEN.Tween({
      scale: 0.01
    }).to({
      scale: 1
    }, 500).delay(0).onUpdate(function() {
      return mesh.scale.set(this.scale, this.scale, this.scale);
    });
    tween2.chain(tween);
    tween.start();
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    tween = new TWEEN.Tween({
      meshes: 1
    }).to({
      meshes: 9
    }, 1000).repeat(Infinity).onUpdate(function() {
      return num_meshes = Math.floor(this.meshes);
    });
    tween.start();
    document.body.appendChild(renderer.domElement);
    return initialised = true;
  };

  pause = false;

  window.togglePause = function() {
    return pause = !pause;
  };

  onWindowResize = function() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    return renderer.setSize(window.innerWidth, window.innerHeight);
  };

  window.addEventListener('resize', onWindowResize, false);

  previousTime = 0;

  animStep = function(t) {
    animate((t - previousTime) / 1000);
    previousTime = t;
    return requestAnimationFrame(animStep);
  };

  animate = function(time) {
    if (!pause) {
      world.Step(time, 10, 10);
      world.ClearForces();
      TWEEN.update();
      localStorage.setItem("positionX", body.GetPosition().x);
      localStorage.setItem("positionY", body.GetPosition().y);
      localStorage.setItem("controls", JSON.stringify(controls.object.position));
    }
    sprite.position.x = body.GetPosition().x * physicsScaleX;
    sprite.position.y = body.GetPosition().y * physicsScaleY;
    controls.update();
    return renderer.render(scene, camera);
  };

  if (!initialised) {
    init();
  }

  animStep(0);

}).call(this);
