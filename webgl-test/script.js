// Generated by CoffeeScript 1.4.0
(function() {
  var Actions, Body, ContactListener, Go, Gos, PlayerControls, Sprite, animStep, animate, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2PolygonShape, b2Vec2, b2World, camera, cameraStart, contactListener, context, controls, createHouse, createMan, filter, frequencyChange, go, init, initialised, key, loadAudioFile, loadedAudio, logSave, moveStart, moving, objStore, object, objects, onMouseDown, onMouseMove, onMouseUp, onMouseWheel, onTouchMove, onTouchStart, onWindowResize, pause, physicsScaleX, physicsScaleY, playAudioFile, prefab, previousTime, removeSave, renderer, save, scene, serialiseTimer, source, stats, value, world, _i, _len,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  initialised = false;

  stats = new Stats();

  stats.setMode(0);

  stats.domElement.style.position = 'absolute';

  stats.domElement.style.left = '0px';

  stats.domElement.style.top = '0px';

  document.body.appendChild(stats.domElement);

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  world = new b2World(new b2Vec2(0, -100), true);

  physicsScaleX = 10;

  physicsScaleY = 10;

  filter = 0;

  source = 0;

  loadedAudio = false;

  if (typeof AudioContext !== "undefined" && AudioContext !== null) {
    context = new AudioContext();
  } else if (typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null) {
    context = new webkitAudioContext();
  } else {
    context = 0;
  }

  playAudioFile = function(buffer) {
    source = context.createBufferSource();
    source.buffer = buffer;
    filter = context.createBiquadFilter();
    filter.type = 0;
    filter.frequency.value = 440;
    source.connect(filter);
    return filter.connect(context.destination);
  };

  loadAudioFile = function(url) {
    var request;
    request = new XMLHttpRequest();
    request.open('get', 'jinroh02.mp3', true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
      return context.decodeAudioData(request.response, function(incomingBuffer) {
        return playAudioFile(incomingBuffer);
      });
    };
    return request.send();
  };

  frequencyChange = function(value) {
    var maxValue, minValue, multiplier, numberOfOctaves;
    minValue = 40;
    maxValue = context.sampleRate / 2;
    numberOfOctaves = Math.log(maxValue / minValue) / Math.LN2;
    multiplier = Math.pow(2, numberOfOctaves * (value - 1.0));
    return filter.frequency.value = maxValue * multiplier;
  };

  window.frequencyChange = frequencyChange;

  window.startMusic = function() {
    return loadAudioFile();
  };

  Body = (function() {

    function Body(go, bodyDef, fixDef, targetPosition) {
      this.go = go;
      this.targetPosition = targetPosition;
      this.body = world.CreateBody(bodyDef);
      this.body.CreateFixture(fixDef);
      this.body.SetUserData(this.go);
    }

    Body.prototype.update = function() {
      if (this.targetPosition != null) {
        this.targetPosition.x = this.body.GetPosition().x * physicsScaleX;
        return this.targetPosition.y = this.body.GetPosition().y * physicsScaleY;
      }
    };

    Body.prototype.toJSON = function() {
      return {
        position: this.body.GetPosition()
      };
    };

    Body.prototype.parse = function(data) {
      return this.body.SetPosition(data.position);
    };

    return Body;

  })();

  Actions = {
    IDLE: 0,
    JUMP: 1
  };

  PlayerControls = (function() {

    PlayerControls.prototype.currentAction = Actions.IDLE;

    PlayerControls.prototype.jumpCallback = function() {
      if (this.onGround) {
        return this.currentAction = Actions.JUMP;
      }
    };

    function PlayerControls(go) {
      this.go = go;
      this.jumpCallback = __bind(this.jumpCallback, this);

      Mousetrap.bind("space", this.jumpCallback, 'keydown');
    }

    PlayerControls.prototype.beginContact = function(go) {
      if ((go.prefab != null) && go.prefab === "House") {
        return this.onGround = true;
      }
    };

    PlayerControls.prototype.endContact = function(go) {
      if ((go.prefab != null) && go.prefab === "House") {
        return this.onGround = false;
      }
    };

    PlayerControls.prototype.update = function() {
      if (this.currentAction === Actions.JUMP) {
        this.go.body.body.SetLinearVelocity(new b2Vec2(0, 40));
        this.go.body.body.SetAwake(true);
        this.go.body.body.SetActive(true);
        return this.currentAction = Actions.IDLE;
      }
    };

    PlayerControls.prototype.toJSON = function() {
      return {};
    };

    return PlayerControls;

  })();

  Gos = [];

  renderer = 0;

  scene = 0;

  camera = 0;

  controls = 0;

  moving = false;

  moveStart = new b2Vec2();

  cameraStart = new b2Vec2();

  onMouseDown = function(event) {
    moveStart.Set(event.clientX, event.clientY);
    cameraStart.Set(camera.position.x, camera.position.y);
    return moving = true;
  };

  onMouseUp = function(event) {
    return moving = false;
  };

  onMouseWheel = function(event) {};

  onTouchStart = function(event) {};

  onTouchMove = function(event) {};

  onMouseMove = function(event) {
    if (moving) {
      camera.position.x = cameraStart.x + (moveStart.x - event.clientX) * 10;
      return camera.position.y = cameraStart.y + (event.clientY - moveStart.y) * 10;
    }
  };

  window.addEventListener('contextmenu', function(event) {
    return event.preventDefault();
  }, false);

  window.addEventListener('mousedown', onMouseDown, false);

  window.addEventListener('mouseup', onMouseUp, false);

  window.addEventListener('mousewheel', onMouseWheel, false);

  window.addEventListener('DOMMouseScroll', onMouseWheel, false);

  window.addEventListener('touchstart', onTouchStart, false);

  window.addEventListener('touchmove', onTouchMove, false);

  window.addEventListener('mousemove', onMouseMove, false);

  Go = (function() {

    function Go(prefab) {
      this.prefab = prefab;
    }

    return Go;

  })();

  ContactListener = (function() {

    function ContactListener() {}

    ContactListener.prototype.PreSolve = function(contact, oldManifold) {};

    ContactListener.prototype.PostSolve = function(contact, contactImpulse) {};

    ContactListener.prototype.BeginContact = function(contact) {
      var goA, goB;
      goA = contact.GetFixtureA().GetBody().GetUserData();
      goB = contact.GetFixtureB().GetBody().GetUserData();
      this.notifyBeginContact(goA, goB);
      return this.notifyBeginContact(goB, goA);
    };

    ContactListener.prototype.EndContact = function(contact) {
      var goA, goB;
      goA = contact.GetFixtureA().GetBody().GetUserData();
      goB = contact.GetFixtureB().GetBody().GetUserData();
      this.notifyEndContact(goA, goB);
      return this.notifyEndContact(goB, goA);
    };

    ContactListener.prototype.notifyBeginContact = function(goA, goB) {
      var key, value, _results;
      _results = [];
      for (key in goA) {
        if (!__hasProp.call(goA, key)) continue;
        value = goA[key];
        if (value.beginContact != null) {
          _results.push(value.beginContact(goB));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ContactListener.prototype.notifyEndContact = function(goA, goB) {
      var key, value, _results;
      _results = [];
      for (key in goA) {
        if (!__hasProp.call(goA, key)) continue;
        value = goA[key];
        if (value.endContact != null) {
          _results.push(value.endContact(goB));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ContactListener;

  })();

  contactListener = new ContactListener;

  world.SetContactListener(contactListener);

  Sprite = (function() {

    function Sprite(go, filename, numFrames, startFrame, endFrame) {
      var spriteMap;
      this.go = go;
      this.numFrames = numFrames;
      this.onLoad = __bind(this.onLoad, this);

      spriteMap = THREE.ImageUtils.loadTexture(filename, null, this.onLoad);
      this.spriteMat = new THREE.SpriteMaterial({
        map: spriteMap,
        color: 0xffffff,
        useScreenCoordinates: false,
        scaleByViewport: true
      });
      this.sprite = new THREE.Sprite(this.spriteMat);
      this.spriteMat.uvScale.set(1 / this.numFrames, 1);
      this.spriteTween = new TWEEN.Tween({
        frame: startFrame,
        numFrames: this.numFrames,
        spriteMat: this.spriteMat
      }).to({
        frame: endFrame
      }, 1000).repeat(Infinity).onUpdate(function() {
        var frameX;
        frameX = (1 / this.numFrames) * Math.floor(this.frame);
        return this.spriteMat.uvOffset.set(frameX, 0);
      });
      this.spriteTween.start();
      scene.add(this.sprite);
    }

    Sprite.prototype.onLoad = function(texture) {
      return this.sprite.scale.set(Math.floor(texture.image.width / this.numFrames), texture.image.height, 1);
    };

    Sprite.prototype.parse = function(data) {
      return this.spriteMat.uvOffset.set(data.uvOffset.x, data.uvOffset.y);
    };

    Sprite.prototype.toJSON = function() {
      return {
        uvOffset: this.spriteMat.uvOffset
      };
    };

    return Sprite;

  })();

  createMan = function(posX, posY) {
    var bodyDef, fixDef, go, height, sprite, width;
    go = new Go("Man");
    sprite = new Sprite(go, "run.jpg", 10, 1, 7);
    go.sprite = sprite;
    width = 2;
    height = 3.2;
    fixDef = new b2FixtureDef;
    fixDef.density = 1.0;
    fixDef.friction = 0;
    fixDef.shape = new b2PolygonShape;
    fixDef.shape.SetAsBox(width * 0.5, height * 0.5);
    bodyDef = new b2BodyDef();
    bodyDef.type = b2Body.b2_dynamicBody;
    bodyDef.position.x = posX;
    bodyDef.position.y = posY;
    go.body = new Body(go, bodyDef, fixDef, sprite.sprite.position);
    go.controls = new PlayerControls(go);
    Gos.push(go);
    return go;
  };

  createHouse = function(posX, posY) {
    var bodyDef, fixDef, go, graphicHeight, graphicWidth, groundGeom, height, material, mesh, width;
    go = new Go("House");
    width = 20;
    height = 10;
    graphicWidth = width * physicsScaleY;
    graphicHeight = height * physicsScaleY;
    material = new THREE.MeshBasicMaterial({
      color: 0x777722,
      wireframe: false
    });
    groundGeom = new THREE.CubeGeometry(graphicWidth, graphicHeight, 1);
    mesh = new THREE.Mesh(groundGeom, material);
    scene.add(mesh);
    fixDef = new b2FixtureDef;
    fixDef.density = 1.0;
    fixDef.friction = 0;
    fixDef.shape = new b2PolygonShape;
    fixDef.shape.SetAsBox(width * 0.5, height * 0.5);
    bodyDef = new b2BodyDef();
    bodyDef.type = b2Body.b2_staticBody;
    bodyDef.position.x = posX;
    bodyDef.position.y = posY;
    go.body = new Body(go, bodyDef, fixDef, mesh.position);
    Gos.push(go);
    return go;
  };

  init = function() {
    camera = new THREE.OrthographicCamera(-400, 400, 400, -400, 1, 100);
    camera.position.z = 40;
    scene = new THREE.Scene();
    renderer = new THREE.WebGLRenderer({
      antialias: false
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);
    return initialised = true;
  };

  pause = false;

  window.togglePause = function() {
    pause = !pause;
    return save();
  };

  Mousetrap.bind("p", window.togglePause, 'keydown');

  onWindowResize = function() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    return renderer.setSize(window.innerWidth, window.innerHeight);
  };

  window.addEventListener('resize', onWindowResize, false);

  save = function() {
    var go, key, object, objects, value, _i, _len;
    objects = {};
    for (_i = 0, _len = Gos.length; _i < _len; _i++) {
      go = Gos[_i];
      object = {
        prefab: go.prefab
      };
      for (key in go) {
        if (!__hasProp.call(go, key)) continue;
        value = go[key];
        if (value.toJSON != null) {
          object += value.toJSON();
        }
      }
      objects += object;
    }
    localStorage.setItem("objects", JSON.stringify(Gos));
    localStorage.setItem("pause", pause);
    return console.log(JSON.stringify(Gos));
  };

  logSave = function() {
    return console.log(localStorage.getItem("objects"));
  };

  Mousetrap.bind("l", logSave, 'keydown');

  removeSave = function() {
    localStorage.removeItem("objects");
    return localStorage.removeItem("pause");
  };

  previousTime = 0;

  animStep = function(t) {
    animate((t - previousTime) / 1000);
    previousTime = t;
    return requestAnimationFrame(animStep);
  };

  serialiseTimer = 0;

  animate = function(time) {
    var go, key, value, _i, _len;
    stats.begin();
    if (!pause) {
      world.Step(time, 10, 10);
      world.ClearForces();
      TWEEN.update();
      removeSave();
    }
    for (_i = 0, _len = Gos.length; _i < _len; _i++) {
      go = Gos[_i];
      for (key in go) {
        if (!__hasProp.call(go, key)) continue;
        value = go[key];
        if (value.update != null) {
          value.update();
        }
      }
    }
    renderer.render(scene, camera);
    return stats.end();
  };

  init();

  pause = localStorage.getItem("pause");

  objStore = localStorage.getItem("objects");

  if (pause && (objStore != null)) {
    console.log("Loading save...");
    objects = JSON.parse(objStore);
    for (_i = 0, _len = objects.length; _i < _len; _i++) {
      object = objects[_i];
      prefab = object.prefab;
      go = void 0;
      if (prefab === "Man") {
        go = createMan(0, 0);
      } else {
        go = createHouse(0, -10);
      }
      for (key in object) {
        if (!__hasProp.call(object, key)) continue;
        value = object[key];
        if (go[key] && (go[key].parse != null)) {
          go[key].parse(value);
        }
      }
    }
  } else {
    createMan(0, 10);
    createHouse(0, -10);
  }

  animStep(0);

}).call(this);
